/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.slimsmart.thrift.rpc.demo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-6-8")
public class WorldTileInfo implements org.apache.thrift.TBase<WorldTileInfo, WorldTileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WorldTileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorldTileInfo");

  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PLAYER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TERRAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("terrain", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tileType", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ALL_DURABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("allDurability", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField CURRENT_DURABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("currentDurability", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField DEFEND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("defendType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField GIVE_UP_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("giveUpEndTime", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PLAYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("playerName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField IS_HAVE_RANDOM_EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("isHaveRandomEvent", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField RANDOM_EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("randomEventId", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField EVENT_END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventEndTime", org.apache.thrift.protocol.TType.I64, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorldTileInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorldTileInfoTupleSchemeFactory());
  }

  public int x; // required
  public int y; // required
  public String name; // required
  public long cityId; // required
  public long playerId; // required
  public int terrain; // required
  public int tileType; // required
  public double allDurability; // required
  public double currentDurability; // required
  public int defendType; // required
  public int giveUpEndTime; // required
  public String playerName; // required
  public boolean isHaveRandomEvent; // required
  public long randomEventId; // required
  public long eventEndTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    X((short)1, "x"),
    Y((short)2, "y"),
    NAME((short)3, "name"),
    CITY_ID((short)4, "cityId"),
    PLAYER_ID((short)5, "playerId"),
    TERRAIN((short)6, "terrain"),
    TILE_TYPE((short)7, "tileType"),
    ALL_DURABILITY((short)8, "allDurability"),
    CURRENT_DURABILITY((short)9, "currentDurability"),
    DEFEND_TYPE((short)10, "defendType"),
    GIVE_UP_END_TIME((short)11, "giveUpEndTime"),
    PLAYER_NAME((short)12, "playerName"),
    IS_HAVE_RANDOM_EVENT((short)13, "isHaveRandomEvent"),
    RANDOM_EVENT_ID((short)14, "randomEventId"),
    EVENT_END_TIME((short)15, "eventEndTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // X
          return X;
        case 2: // Y
          return Y;
        case 3: // NAME
          return NAME;
        case 4: // CITY_ID
          return CITY_ID;
        case 5: // PLAYER_ID
          return PLAYER_ID;
        case 6: // TERRAIN
          return TERRAIN;
        case 7: // TILE_TYPE
          return TILE_TYPE;
        case 8: // ALL_DURABILITY
          return ALL_DURABILITY;
        case 9: // CURRENT_DURABILITY
          return CURRENT_DURABILITY;
        case 10: // DEFEND_TYPE
          return DEFEND_TYPE;
        case 11: // GIVE_UP_END_TIME
          return GIVE_UP_END_TIME;
        case 12: // PLAYER_NAME
          return PLAYER_NAME;
        case 13: // IS_HAVE_RANDOM_EVENT
          return IS_HAVE_RANDOM_EVENT;
        case 14: // RANDOM_EVENT_ID
          return RANDOM_EVENT_ID;
        case 15: // EVENT_END_TIME
          return EVENT_END_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __X_ISSET_ID = 0;
  private static final int __Y_ISSET_ID = 1;
  private static final int __CITYID_ISSET_ID = 2;
  private static final int __PLAYERID_ISSET_ID = 3;
  private static final int __TERRAIN_ISSET_ID = 4;
  private static final int __TILETYPE_ISSET_ID = 5;
  private static final int __ALLDURABILITY_ISSET_ID = 6;
  private static final int __CURRENTDURABILITY_ISSET_ID = 7;
  private static final int __DEFENDTYPE_ISSET_ID = 8;
  private static final int __GIVEUPENDTIME_ISSET_ID = 9;
  private static final int __ISHAVERANDOMEVENT_ISSET_ID = 10;
  private static final int __RANDOMEVENTID_ISSET_ID = 11;
  private static final int __EVENTENDTIME_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("cityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLAYER_ID, new org.apache.thrift.meta_data.FieldMetaData("playerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TERRAIN, new org.apache.thrift.meta_data.FieldMetaData("terrain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALL_DURABILITY, new org.apache.thrift.meta_data.FieldMetaData("allDurability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENT_DURABILITY, new org.apache.thrift.meta_data.FieldMetaData("currentDurability", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEFEND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("defendType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GIVE_UP_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("giveUpEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("playerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_HAVE_RANDOM_EVENT, new org.apache.thrift.meta_data.FieldMetaData("isHaveRandomEvent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RANDOM_EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("randomEventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EVENT_END_TIME, new org.apache.thrift.meta_data.FieldMetaData("eventEndTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorldTileInfo.class, metaDataMap);
  }

  public WorldTileInfo() {
  }

  public WorldTileInfo(
    int x,
    int y,
    String name,
    long cityId,
    long playerId,
    int terrain,
    int tileType,
    double allDurability,
    double currentDurability,
    int defendType,
    int giveUpEndTime,
    String playerName,
    boolean isHaveRandomEvent,
    long randomEventId,
    long eventEndTime)
  {
    this();
    this.x = x;
    setXIsSet(true);
    this.y = y;
    setYIsSet(true);
    this.name = name;
    this.cityId = cityId;
    setCityIdIsSet(true);
    this.playerId = playerId;
    setPlayerIdIsSet(true);
    this.terrain = terrain;
    setTerrainIsSet(true);
    this.tileType = tileType;
    setTileTypeIsSet(true);
    this.allDurability = allDurability;
    setAllDurabilityIsSet(true);
    this.currentDurability = currentDurability;
    setCurrentDurabilityIsSet(true);
    this.defendType = defendType;
    setDefendTypeIsSet(true);
    this.giveUpEndTime = giveUpEndTime;
    setGiveUpEndTimeIsSet(true);
    this.playerName = playerName;
    this.isHaveRandomEvent = isHaveRandomEvent;
    setIsHaveRandomEventIsSet(true);
    this.randomEventId = randomEventId;
    setRandomEventIdIsSet(true);
    this.eventEndTime = eventEndTime;
    setEventEndTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorldTileInfo(WorldTileInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.x = other.x;
    this.y = other.y;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.cityId = other.cityId;
    this.playerId = other.playerId;
    this.terrain = other.terrain;
    this.tileType = other.tileType;
    this.allDurability = other.allDurability;
    this.currentDurability = other.currentDurability;
    this.defendType = other.defendType;
    this.giveUpEndTime = other.giveUpEndTime;
    if (other.isSetPlayerName()) {
      this.playerName = other.playerName;
    }
    this.isHaveRandomEvent = other.isHaveRandomEvent;
    this.randomEventId = other.randomEventId;
    this.eventEndTime = other.eventEndTime;
  }

  public WorldTileInfo deepCopy() {
    return new WorldTileInfo(this);
  }

  @Override
  public void clear() {
    setXIsSet(false);
    this.x = 0;
    setYIsSet(false);
    this.y = 0;
    this.name = null;
    setCityIdIsSet(false);
    this.cityId = 0;
    setPlayerIdIsSet(false);
    this.playerId = 0;
    setTerrainIsSet(false);
    this.terrain = 0;
    setTileTypeIsSet(false);
    this.tileType = 0;
    setAllDurabilityIsSet(false);
    this.allDurability = 0.0;
    setCurrentDurabilityIsSet(false);
    this.currentDurability = 0.0;
    setDefendTypeIsSet(false);
    this.defendType = 0;
    setGiveUpEndTimeIsSet(false);
    this.giveUpEndTime = 0;
    this.playerName = null;
    setIsHaveRandomEventIsSet(false);
    this.isHaveRandomEvent = false;
    setRandomEventIdIsSet(false);
    this.randomEventId = 0;
    setEventEndTimeIsSet(false);
    this.eventEndTime = 0;
  }

  public int getX() {
    return this.x;
  }

  public WorldTileInfo setX(int x) {
    this.x = x;
    setXIsSet(true);
    return this;
  }

  public void unsetX() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __X_ISSET_ID);
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return EncodingUtils.testBit(__isset_bitfield, __X_ISSET_ID);
  }

  public void setXIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __X_ISSET_ID, value);
  }

  public int getY() {
    return this.y;
  }

  public WorldTileInfo setY(int y) {
    this.y = y;
    setYIsSet(true);
    return this;
  }

  public void unsetY() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __Y_ISSET_ID);
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return EncodingUtils.testBit(__isset_bitfield, __Y_ISSET_ID);
  }

  public void setYIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __Y_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public WorldTileInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getCityId() {
    return this.cityId;
  }

  public WorldTileInfo setCityId(long cityId) {
    this.cityId = cityId;
    setCityIdIsSet(true);
    return this;
  }

  public void unsetCityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  /** Returns true if field cityId is set (has been assigned a value) and false otherwise */
  public boolean isSetCityId() {
    return EncodingUtils.testBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  public void setCityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITYID_ISSET_ID, value);
  }

  public long getPlayerId() {
    return this.playerId;
  }

  public WorldTileInfo setPlayerId(long playerId) {
    this.playerId = playerId;
    setPlayerIdIsSet(true);
    return this;
  }

  public void unsetPlayerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  /** Returns true if field playerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerId() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  public void setPlayerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERID_ISSET_ID, value);
  }

  public int getTerrain() {
    return this.terrain;
  }

  public WorldTileInfo setTerrain(int terrain) {
    this.terrain = terrain;
    setTerrainIsSet(true);
    return this;
  }

  public void unsetTerrain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TERRAIN_ISSET_ID);
  }

  /** Returns true if field terrain is set (has been assigned a value) and false otherwise */
  public boolean isSetTerrain() {
    return EncodingUtils.testBit(__isset_bitfield, __TERRAIN_ISSET_ID);
  }

  public void setTerrainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TERRAIN_ISSET_ID, value);
  }

  public int getTileType() {
    return this.tileType;
  }

  public WorldTileInfo setTileType(int tileType) {
    this.tileType = tileType;
    setTileTypeIsSet(true);
    return this;
  }

  public void unsetTileType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TILETYPE_ISSET_ID);
  }

  /** Returns true if field tileType is set (has been assigned a value) and false otherwise */
  public boolean isSetTileType() {
    return EncodingUtils.testBit(__isset_bitfield, __TILETYPE_ISSET_ID);
  }

  public void setTileTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TILETYPE_ISSET_ID, value);
  }

  public double getAllDurability() {
    return this.allDurability;
  }

  public WorldTileInfo setAllDurability(double allDurability) {
    this.allDurability = allDurability;
    setAllDurabilityIsSet(true);
    return this;
  }

  public void unsetAllDurability() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLDURABILITY_ISSET_ID);
  }

  /** Returns true if field allDurability is set (has been assigned a value) and false otherwise */
  public boolean isSetAllDurability() {
    return EncodingUtils.testBit(__isset_bitfield, __ALLDURABILITY_ISSET_ID);
  }

  public void setAllDurabilityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALLDURABILITY_ISSET_ID, value);
  }

  public double getCurrentDurability() {
    return this.currentDurability;
  }

  public WorldTileInfo setCurrentDurability(double currentDurability) {
    this.currentDurability = currentDurability;
    setCurrentDurabilityIsSet(true);
    return this;
  }

  public void unsetCurrentDurability() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTDURABILITY_ISSET_ID);
  }

  /** Returns true if field currentDurability is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentDurability() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTDURABILITY_ISSET_ID);
  }

  public void setCurrentDurabilityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTDURABILITY_ISSET_ID, value);
  }

  public int getDefendType() {
    return this.defendType;
  }

  public WorldTileInfo setDefendType(int defendType) {
    this.defendType = defendType;
    setDefendTypeIsSet(true);
    return this;
  }

  public void unsetDefendType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFENDTYPE_ISSET_ID);
  }

  /** Returns true if field defendType is set (has been assigned a value) and false otherwise */
  public boolean isSetDefendType() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFENDTYPE_ISSET_ID);
  }

  public void setDefendTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFENDTYPE_ISSET_ID, value);
  }

  public int getGiveUpEndTime() {
    return this.giveUpEndTime;
  }

  public WorldTileInfo setGiveUpEndTime(int giveUpEndTime) {
    this.giveUpEndTime = giveUpEndTime;
    setGiveUpEndTimeIsSet(true);
    return this;
  }

  public void unsetGiveUpEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GIVEUPENDTIME_ISSET_ID);
  }

  /** Returns true if field giveUpEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetGiveUpEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __GIVEUPENDTIME_ISSET_ID);
  }

  public void setGiveUpEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GIVEUPENDTIME_ISSET_ID, value);
  }

  public String getPlayerName() {
    return this.playerName;
  }

  public WorldTileInfo setPlayerName(String playerName) {
    this.playerName = playerName;
    return this;
  }

  public void unsetPlayerName() {
    this.playerName = null;
  }

  /** Returns true if field playerName is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerName() {
    return this.playerName != null;
  }

  public void setPlayerNameIsSet(boolean value) {
    if (!value) {
      this.playerName = null;
    }
  }

  public boolean isIsHaveRandomEvent() {
    return this.isHaveRandomEvent;
  }

  public WorldTileInfo setIsHaveRandomEvent(boolean isHaveRandomEvent) {
    this.isHaveRandomEvent = isHaveRandomEvent;
    setIsHaveRandomEventIsSet(true);
    return this;
  }

  public void unsetIsHaveRandomEvent() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHAVERANDOMEVENT_ISSET_ID);
  }

  /** Returns true if field isHaveRandomEvent is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHaveRandomEvent() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHAVERANDOMEVENT_ISSET_ID);
  }

  public void setIsHaveRandomEventIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHAVERANDOMEVENT_ISSET_ID, value);
  }

  public long getRandomEventId() {
    return this.randomEventId;
  }

  public WorldTileInfo setRandomEventId(long randomEventId) {
    this.randomEventId = randomEventId;
    setRandomEventIdIsSet(true);
    return this;
  }

  public void unsetRandomEventId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANDOMEVENTID_ISSET_ID);
  }

  /** Returns true if field randomEventId is set (has been assigned a value) and false otherwise */
  public boolean isSetRandomEventId() {
    return EncodingUtils.testBit(__isset_bitfield, __RANDOMEVENTID_ISSET_ID);
  }

  public void setRandomEventIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANDOMEVENTID_ISSET_ID, value);
  }

  public long getEventEndTime() {
    return this.eventEndTime;
  }

  public WorldTileInfo setEventEndTime(long eventEndTime) {
    this.eventEndTime = eventEndTime;
    setEventEndTimeIsSet(true);
    return this;
  }

  public void unsetEventEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTENDTIME_ISSET_ID);
  }

  /** Returns true if field eventEndTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEventEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTENDTIME_ISSET_ID);
  }

  public void setEventEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTENDTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((Integer)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CITY_ID:
      if (value == null) {
        unsetCityId();
      } else {
        setCityId((Long)value);
      }
      break;

    case PLAYER_ID:
      if (value == null) {
        unsetPlayerId();
      } else {
        setPlayerId((Long)value);
      }
      break;

    case TERRAIN:
      if (value == null) {
        unsetTerrain();
      } else {
        setTerrain((Integer)value);
      }
      break;

    case TILE_TYPE:
      if (value == null) {
        unsetTileType();
      } else {
        setTileType((Integer)value);
      }
      break;

    case ALL_DURABILITY:
      if (value == null) {
        unsetAllDurability();
      } else {
        setAllDurability((Double)value);
      }
      break;

    case CURRENT_DURABILITY:
      if (value == null) {
        unsetCurrentDurability();
      } else {
        setCurrentDurability((Double)value);
      }
      break;

    case DEFEND_TYPE:
      if (value == null) {
        unsetDefendType();
      } else {
        setDefendType((Integer)value);
      }
      break;

    case GIVE_UP_END_TIME:
      if (value == null) {
        unsetGiveUpEndTime();
      } else {
        setGiveUpEndTime((Integer)value);
      }
      break;

    case PLAYER_NAME:
      if (value == null) {
        unsetPlayerName();
      } else {
        setPlayerName((String)value);
      }
      break;

    case IS_HAVE_RANDOM_EVENT:
      if (value == null) {
        unsetIsHaveRandomEvent();
      } else {
        setIsHaveRandomEvent((Boolean)value);
      }
      break;

    case RANDOM_EVENT_ID:
      if (value == null) {
        unsetRandomEventId();
      } else {
        setRandomEventId((Long)value);
      }
      break;

    case EVENT_END_TIME:
      if (value == null) {
        unsetEventEndTime();
      } else {
        setEventEndTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case X:
      return Integer.valueOf(getX());

    case Y:
      return Integer.valueOf(getY());

    case NAME:
      return getName();

    case CITY_ID:
      return Long.valueOf(getCityId());

    case PLAYER_ID:
      return Long.valueOf(getPlayerId());

    case TERRAIN:
      return Integer.valueOf(getTerrain());

    case TILE_TYPE:
      return Integer.valueOf(getTileType());

    case ALL_DURABILITY:
      return Double.valueOf(getAllDurability());

    case CURRENT_DURABILITY:
      return Double.valueOf(getCurrentDurability());

    case DEFEND_TYPE:
      return Integer.valueOf(getDefendType());

    case GIVE_UP_END_TIME:
      return Integer.valueOf(getGiveUpEndTime());

    case PLAYER_NAME:
      return getPlayerName();

    case IS_HAVE_RANDOM_EVENT:
      return Boolean.valueOf(isIsHaveRandomEvent());

    case RANDOM_EVENT_ID:
      return Long.valueOf(getRandomEventId());

    case EVENT_END_TIME:
      return Long.valueOf(getEventEndTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case NAME:
      return isSetName();
    case CITY_ID:
      return isSetCityId();
    case PLAYER_ID:
      return isSetPlayerId();
    case TERRAIN:
      return isSetTerrain();
    case TILE_TYPE:
      return isSetTileType();
    case ALL_DURABILITY:
      return isSetAllDurability();
    case CURRENT_DURABILITY:
      return isSetCurrentDurability();
    case DEFEND_TYPE:
      return isSetDefendType();
    case GIVE_UP_END_TIME:
      return isSetGiveUpEndTime();
    case PLAYER_NAME:
      return isSetPlayerName();
    case IS_HAVE_RANDOM_EVENT:
      return isSetIsHaveRandomEvent();
    case RANDOM_EVENT_ID:
      return isSetRandomEventId();
    case EVENT_END_TIME:
      return isSetEventEndTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorldTileInfo)
      return this.equals((WorldTileInfo)that);
    return false;
  }

  public boolean equals(WorldTileInfo that) {
    if (that == null)
      return false;

    boolean this_present_x = true;
    boolean that_present_x = true;
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (this.x != that.x)
        return false;
    }

    boolean this_present_y = true;
    boolean that_present_y = true;
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (this.y != that.y)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_cityId = true;
    boolean that_present_cityId = true;
    if (this_present_cityId || that_present_cityId) {
      if (!(this_present_cityId && that_present_cityId))
        return false;
      if (this.cityId != that.cityId)
        return false;
    }

    boolean this_present_playerId = true;
    boolean that_present_playerId = true;
    if (this_present_playerId || that_present_playerId) {
      if (!(this_present_playerId && that_present_playerId))
        return false;
      if (this.playerId != that.playerId)
        return false;
    }

    boolean this_present_terrain = true;
    boolean that_present_terrain = true;
    if (this_present_terrain || that_present_terrain) {
      if (!(this_present_terrain && that_present_terrain))
        return false;
      if (this.terrain != that.terrain)
        return false;
    }

    boolean this_present_tileType = true;
    boolean that_present_tileType = true;
    if (this_present_tileType || that_present_tileType) {
      if (!(this_present_tileType && that_present_tileType))
        return false;
      if (this.tileType != that.tileType)
        return false;
    }

    boolean this_present_allDurability = true;
    boolean that_present_allDurability = true;
    if (this_present_allDurability || that_present_allDurability) {
      if (!(this_present_allDurability && that_present_allDurability))
        return false;
      if (this.allDurability != that.allDurability)
        return false;
    }

    boolean this_present_currentDurability = true;
    boolean that_present_currentDurability = true;
    if (this_present_currentDurability || that_present_currentDurability) {
      if (!(this_present_currentDurability && that_present_currentDurability))
        return false;
      if (this.currentDurability != that.currentDurability)
        return false;
    }

    boolean this_present_defendType = true;
    boolean that_present_defendType = true;
    if (this_present_defendType || that_present_defendType) {
      if (!(this_present_defendType && that_present_defendType))
        return false;
      if (this.defendType != that.defendType)
        return false;
    }

    boolean this_present_giveUpEndTime = true;
    boolean that_present_giveUpEndTime = true;
    if (this_present_giveUpEndTime || that_present_giveUpEndTime) {
      if (!(this_present_giveUpEndTime && that_present_giveUpEndTime))
        return false;
      if (this.giveUpEndTime != that.giveUpEndTime)
        return false;
    }

    boolean this_present_playerName = true && this.isSetPlayerName();
    boolean that_present_playerName = true && that.isSetPlayerName();
    if (this_present_playerName || that_present_playerName) {
      if (!(this_present_playerName && that_present_playerName))
        return false;
      if (!this.playerName.equals(that.playerName))
        return false;
    }

    boolean this_present_isHaveRandomEvent = true;
    boolean that_present_isHaveRandomEvent = true;
    if (this_present_isHaveRandomEvent || that_present_isHaveRandomEvent) {
      if (!(this_present_isHaveRandomEvent && that_present_isHaveRandomEvent))
        return false;
      if (this.isHaveRandomEvent != that.isHaveRandomEvent)
        return false;
    }

    boolean this_present_randomEventId = true;
    boolean that_present_randomEventId = true;
    if (this_present_randomEventId || that_present_randomEventId) {
      if (!(this_present_randomEventId && that_present_randomEventId))
        return false;
      if (this.randomEventId != that.randomEventId)
        return false;
    }

    boolean this_present_eventEndTime = true;
    boolean that_present_eventEndTime = true;
    if (this_present_eventEndTime || that_present_eventEndTime) {
      if (!(this_present_eventEndTime && that_present_eventEndTime))
        return false;
      if (this.eventEndTime != that.eventEndTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_x = true;
    list.add(present_x);
    if (present_x)
      list.add(x);

    boolean present_y = true;
    list.add(present_y);
    if (present_y)
      list.add(y);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_cityId = true;
    list.add(present_cityId);
    if (present_cityId)
      list.add(cityId);

    boolean present_playerId = true;
    list.add(present_playerId);
    if (present_playerId)
      list.add(playerId);

    boolean present_terrain = true;
    list.add(present_terrain);
    if (present_terrain)
      list.add(terrain);

    boolean present_tileType = true;
    list.add(present_tileType);
    if (present_tileType)
      list.add(tileType);

    boolean present_allDurability = true;
    list.add(present_allDurability);
    if (present_allDurability)
      list.add(allDurability);

    boolean present_currentDurability = true;
    list.add(present_currentDurability);
    if (present_currentDurability)
      list.add(currentDurability);

    boolean present_defendType = true;
    list.add(present_defendType);
    if (present_defendType)
      list.add(defendType);

    boolean present_giveUpEndTime = true;
    list.add(present_giveUpEndTime);
    if (present_giveUpEndTime)
      list.add(giveUpEndTime);

    boolean present_playerName = true && (isSetPlayerName());
    list.add(present_playerName);
    if (present_playerName)
      list.add(playerName);

    boolean present_isHaveRandomEvent = true;
    list.add(present_isHaveRandomEvent);
    if (present_isHaveRandomEvent)
      list.add(isHaveRandomEvent);

    boolean present_randomEventId = true;
    list.add(present_randomEventId);
    if (present_randomEventId)
      list.add(randomEventId);

    boolean present_eventEndTime = true;
    list.add(present_eventEndTime);
    if (present_eventEndTime)
      list.add(eventEndTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(WorldTileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetX()).compareTo(other.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, other.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(other.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, other.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityId()).compareTo(other.isSetCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityId, other.cityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerId()).compareTo(other.isSetPlayerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerId, other.playerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerrain()).compareTo(other.isSetTerrain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerrain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.terrain, other.terrain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTileType()).compareTo(other.isSetTileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tileType, other.tileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllDurability()).compareTo(other.isSetAllDurability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllDurability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allDurability, other.allDurability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentDurability()).compareTo(other.isSetCurrentDurability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentDurability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentDurability, other.currentDurability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefendType()).compareTo(other.isSetDefendType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefendType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defendType, other.defendType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGiveUpEndTime()).compareTo(other.isSetGiveUpEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGiveUpEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.giveUpEndTime, other.giveUpEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerName()).compareTo(other.isSetPlayerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerName, other.playerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHaveRandomEvent()).compareTo(other.isSetIsHaveRandomEvent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHaveRandomEvent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHaveRandomEvent, other.isHaveRandomEvent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRandomEventId()).compareTo(other.isSetRandomEventId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandomEventId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randomEventId, other.randomEventId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventEndTime()).compareTo(other.isSetEventEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventEndTime, other.eventEndTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorldTileInfo(");
    boolean first = true;

    sb.append("x:");
    sb.append(this.x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    sb.append(this.y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityId:");
    sb.append(this.cityId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerId:");
    sb.append(this.playerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("terrain:");
    sb.append(this.terrain);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tileType:");
    sb.append(this.tileType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allDurability:");
    sb.append(this.allDurability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentDurability:");
    sb.append(this.currentDurability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defendType:");
    sb.append(this.defendType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("giveUpEndTime:");
    sb.append(this.giveUpEndTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerName:");
    if (this.playerName == null) {
      sb.append("null");
    } else {
      sb.append(this.playerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHaveRandomEvent:");
    sb.append(this.isHaveRandomEvent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("randomEventId:");
    sb.append(this.randomEventId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventEndTime:");
    sb.append(this.eventEndTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorldTileInfoStandardSchemeFactory implements SchemeFactory {
    public WorldTileInfoStandardScheme getScheme() {
      return new WorldTileInfoStandardScheme();
    }
  }

  private static class WorldTileInfoStandardScheme extends StandardScheme<WorldTileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorldTileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.x = iprot.readI32();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.y = iprot.readI32();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cityId = iprot.readI64();
              struct.setCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLAYER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.playerId = iprot.readI64();
              struct.setPlayerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TERRAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.terrain = iprot.readI32();
              struct.setTerrainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tileType = iprot.readI32();
              struct.setTileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALL_DURABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.allDurability = iprot.readDouble();
              struct.setAllDurabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CURRENT_DURABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currentDurability = iprot.readDouble();
              struct.setCurrentDurabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DEFEND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.defendType = iprot.readI32();
              struct.setDefendTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // GIVE_UP_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.giveUpEndTime = iprot.readI32();
              struct.setGiveUpEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PLAYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.playerName = iprot.readString();
              struct.setPlayerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_HAVE_RANDOM_EVENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isHaveRandomEvent = iprot.readBool();
              struct.setIsHaveRandomEventIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RANDOM_EVENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.randomEventId = iprot.readI64();
              struct.setRandomEventIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EVENT_END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventEndTime = iprot.readI64();
              struct.setEventEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorldTileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(struct.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(struct.y);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CITY_ID_FIELD_DESC);
      oprot.writeI64(struct.cityId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAYER_ID_FIELD_DESC);
      oprot.writeI64(struct.playerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TERRAIN_FIELD_DESC);
      oprot.writeI32(struct.terrain);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TILE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.tileType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALL_DURABILITY_FIELD_DESC);
      oprot.writeDouble(struct.allDurability);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_DURABILITY_FIELD_DESC);
      oprot.writeDouble(struct.currentDurability);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFEND_TYPE_FIELD_DESC);
      oprot.writeI32(struct.defendType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GIVE_UP_END_TIME_FIELD_DESC);
      oprot.writeI32(struct.giveUpEndTime);
      oprot.writeFieldEnd();
      if (struct.playerName != null) {
        oprot.writeFieldBegin(PLAYER_NAME_FIELD_DESC);
        oprot.writeString(struct.playerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_HAVE_RANDOM_EVENT_FIELD_DESC);
      oprot.writeBool(struct.isHaveRandomEvent);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RANDOM_EVENT_ID_FIELD_DESC);
      oprot.writeI64(struct.randomEventId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EVENT_END_TIME_FIELD_DESC);
      oprot.writeI64(struct.eventEndTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorldTileInfoTupleSchemeFactory implements SchemeFactory {
    public WorldTileInfoTupleScheme getScheme() {
      return new WorldTileInfoTupleScheme();
    }
  }

  private static class WorldTileInfoTupleScheme extends TupleScheme<WorldTileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorldTileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetX()) {
        optionals.set(0);
      }
      if (struct.isSetY()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetCityId()) {
        optionals.set(3);
      }
      if (struct.isSetPlayerId()) {
        optionals.set(4);
      }
      if (struct.isSetTerrain()) {
        optionals.set(5);
      }
      if (struct.isSetTileType()) {
        optionals.set(6);
      }
      if (struct.isSetAllDurability()) {
        optionals.set(7);
      }
      if (struct.isSetCurrentDurability()) {
        optionals.set(8);
      }
      if (struct.isSetDefendType()) {
        optionals.set(9);
      }
      if (struct.isSetGiveUpEndTime()) {
        optionals.set(10);
      }
      if (struct.isSetPlayerName()) {
        optionals.set(11);
      }
      if (struct.isSetIsHaveRandomEvent()) {
        optionals.set(12);
      }
      if (struct.isSetRandomEventId()) {
        optionals.set(13);
      }
      if (struct.isSetEventEndTime()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetX()) {
        oprot.writeI32(struct.x);
      }
      if (struct.isSetY()) {
        oprot.writeI32(struct.y);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetCityId()) {
        oprot.writeI64(struct.cityId);
      }
      if (struct.isSetPlayerId()) {
        oprot.writeI64(struct.playerId);
      }
      if (struct.isSetTerrain()) {
        oprot.writeI32(struct.terrain);
      }
      if (struct.isSetTileType()) {
        oprot.writeI32(struct.tileType);
      }
      if (struct.isSetAllDurability()) {
        oprot.writeDouble(struct.allDurability);
      }
      if (struct.isSetCurrentDurability()) {
        oprot.writeDouble(struct.currentDurability);
      }
      if (struct.isSetDefendType()) {
        oprot.writeI32(struct.defendType);
      }
      if (struct.isSetGiveUpEndTime()) {
        oprot.writeI32(struct.giveUpEndTime);
      }
      if (struct.isSetPlayerName()) {
        oprot.writeString(struct.playerName);
      }
      if (struct.isSetIsHaveRandomEvent()) {
        oprot.writeBool(struct.isHaveRandomEvent);
      }
      if (struct.isSetRandomEventId()) {
        oprot.writeI64(struct.randomEventId);
      }
      if (struct.isSetEventEndTime()) {
        oprot.writeI64(struct.eventEndTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorldTileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.x = iprot.readI32();
        struct.setXIsSet(true);
      }
      if (incoming.get(1)) {
        struct.y = iprot.readI32();
        struct.setYIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cityId = iprot.readI64();
        struct.setCityIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.playerId = iprot.readI64();
        struct.setPlayerIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.terrain = iprot.readI32();
        struct.setTerrainIsSet(true);
      }
      if (incoming.get(6)) {
        struct.tileType = iprot.readI32();
        struct.setTileTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.allDurability = iprot.readDouble();
        struct.setAllDurabilityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.currentDurability = iprot.readDouble();
        struct.setCurrentDurabilityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.defendType = iprot.readI32();
        struct.setDefendTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.giveUpEndTime = iprot.readI32();
        struct.setGiveUpEndTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.playerName = iprot.readString();
        struct.setPlayerNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.isHaveRandomEvent = iprot.readBool();
        struct.setIsHaveRandomEventIsSet(true);
      }
      if (incoming.get(13)) {
        struct.randomEventId = iprot.readI64();
        struct.setRandomEventIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.eventEndTime = iprot.readI64();
        struct.setEventEndTimeIsSet(true);
      }
    }
  }

}

